1. How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	By seing only the modified lines with a "+" and "-" sign in front of them 
	spared me the effort of manually checking each line of code in a document 
	that might have had a big number of lines.


2. How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It will help me reflect on my old ways of doing things, and see clearly
    where I did good, and where I did wrong.
    I could also save old ideas that didn't work at the time because of my 
    limited experience, and implement them in future projects.


3. What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

	(manually choosing when to create a commit)
    The pros: - updating documents according to your own needs, in terms of 
    			frequency, quantity or logical changes;
    		  - difference between versions is easier to spot;
    		  - adding a personalized commit message that will appear in the
    		  	commit history when running "git log";

    The cons: - forgeting to commit your changes, and accidentally runing
    			the "git reset --hard" command;

    (having versions automatically saved, like Google docs does)
    The pros: - not having to worry about forgeting to commit some changes;

    The cons: - lack of flexibility;
    		  - the danger of having some unwanted changes commited without
    		  	your concent;


4. Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

	Git allows saving multiple files in one commit because it specially designed 
	for programmers. Very frequently, a logical change in a programming project 
	will imply modifications in more than one file.


5. How can you use the commands git log and git diff to view the history of files?

	"git log"  - shows a list with all the commits made on the current branch
	"git diff" - will show you all the different lines between the files
				 in the working directory and the ones in repository;
			   - you can also use it to check what lines were modified between 
			   	 two different commits by adding their IDs next to the command,
			   	 like this: "git diff old-commit-ID new-commit-ID"

6. How might using version control make you more confident to make changes that
could break something?

	Using git makes me confident to make changes to a file without worrying
	that I might break something because if I make a new commit per each
	logical change, I can always track back to a version of my project where
	everything worked just fine.


7. Now that you have your workspace set up, what do you want to try using Git for?

    I would like using git to make a new reflections repository whenever I learn
    something new, and update it frequently, so that I and others interested in 
    that field can look back on it and refine our knowledge.
    I would also love to update my gitHub portfolio with beautiful projects, 
    and meet other like-minded people :)


Thank you @Denyos for the 
Commands:
q |    exit git log!
git log  |    List the commits and show which files have changed
git log --stat  |    Show addition information about the commits
git diff id1 id2  |    Compare two commits
git clone  |    Create a local copy/clone from the repository
git config --global color.ui auto |    get colored diff output
git checkout | Shows a previous version of the file. This is not a checkout to edit like in SVN or TFS!