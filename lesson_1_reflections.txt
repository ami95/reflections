How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	The "+" and "-" signs designating the old and new line made it easy. Also 
	thefact that the different lines were printed on two consecutive rows.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It could do that because it allows me to spot the differences between 
    different versions of code much faster than by manually checking 
    line-by-line.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The pros: - You can decide for yourself when to commit something, according
    			to your own needs and criteria
    The cons: - You could forget to commit something important

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git has a special way of saving files, that makes it more efficient.

How can you use the commands git log and git diff to view the history of files?

   https://www.git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History

How might using version control make you more confident to make changes that
could break something?

    It could do that by giving me the certainty that I can always click the
    "undo" button, and have the code the same as it was before the changes.

Now that you have your workspace set up, what do you want to try using Git for?

    I would love to use Git for my future projects in order to build myself
    a beautiful portfolio, that will impress future partners, on GitHub


How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	I could see what worked on earlyer versions and what didn't, I could decide to 
	add an old feature into the new version.
	I can also see my old ways of coding, and see my misstakes, thus improoving 
	my coding skills.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	pro - I could structure the commit frequency according to logical changes. 
		This practice makes differences between versions easier to spot.

	con - forgeting to commit

	Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	Git does that because it was specially designed for programmers. Sometimes one logical change in an application
	may imply modifications in multiple files of the project.


How can you use the commands git log and git diff to view the history of files?

	From the gitConsole, making shure that we are in the right repository, by typing git log, we will see a history of all 
	changes. "git log --stat" will give you a more detailed history(including the names of the modified files and number of
	modified lines).

	The "git diff" command is used when we want to see the differences between two different versions of our project.
	The sintax of the command is the following: "git diff id_commit_old id_commit_new"


How might using version control make you more confident to make changes that could break something?

	By knowing that I can use the "git checkout" command to get back to a previous state of the project,
	I can make any changes I want without having to worry that I might make an unfixable misstake 

Now that you have your workspace set up, what do you want to try using Git for?
	I want to use git to help me complete the Full Stack Foundations Tutorial
	https://classroom.udacity.com/courses/ud088/lessons/3621198668/concepts/35960790720923
	After that I will use it still for all my future projects because it is a
	neat and tidy way of managing my modifications.